mse version: 2.0.0
game: magic
short name: Mainframe Splits
full name: Fusable Split Cards
icon: card-sample.png
installer group: magic/m15 style/split cards/fuse
position hint: 011

version: 2024-09-03
depends on:
	package: magic.mse-game
	version: 2014-06-25
depends on:
	package: magic-default-image.mse-include
	version: 2007-09-23
depends on:
	package: magic-modules.mse-include
	version: 2024-05-20
depends on:
	package: magic-mana-large.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mana-small.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mainframe-extras.mse-include
	version: 2018-01-01

card width: 523
card height: 375
card dpi: 150
############################################################## Extra scripts
init script:
	# Load scripts for image box
	include file: /magic-default-image.mse-include/scripts
	
	# Should hybrids have a grey name?
	mask_hybrid_with_land := { styling.grey_hybrid_name }
	
	#Should multicolor lands with basic land types have a colored name?
	mask_multi_land_with_color := { styling.colored_multicolor_land_name }
	
	template_prefix := [
		card: "normal/"
		fuse_left: "fuse_left/"
		fuse_right: "fuse_right/"
		cover: "rooms/"
		bridge: "bridge/"
		nyx: "/magic-modules.mse-include/trims/nyx/",
		star: "/magic-modules.mse-include/trims/star/",
		beyond: "/magic-modules.mse-include/trims/beyond/",
		pt: "/magic-modules.mse-include/pts/375 m15/"
		identity: "/magic-modules.mse-include/indicators/"
	]
	template_suffix := [
		card: "card.jpg"
		fuse_left: "card.png"
		fuse_right: "card.png"
		cover: "rooms/"
		bridge: "bridge.png"
		cover: "cover.png"
		nyx: "nyx.png",
		star: "star.png",
		beyond: "beyond.png",
		pt: "pt.png"
		identity: "identity.png"
	]
	template := { 
		if type_name(harder_script[type] or else nil) != type_name(nil)
			then harder_script[type](input, land:false)
		else template_prefix[type] + input + template_suffix[type]
	}
	land_template := {
		if type_name(harder_script[type] or else nil) != type_name(nil)
			then harder_script[type](input, land:true)
		else template_prefix[type] + input + (if landless(type) or input == "a" then "" else "l") + template_suffix[type]
	}
	landless := {
		landless_ar[input] or else false
	}
	landless_ar := [
		nyx: true,
		cover: true,
		star: true,
		beyond: true
	]
	# Use land templates for previews because they show more contrast
	hybrid_previews := "land,hybrid"
	
	# Use the normal tap symbol
	mana_t := {
		if      styling.tap_symbol == "old"        then "old"
		else if styling.tap_symbol == "diagonal T" then "older"
		else                                            "new"
	}
	
	# Use guild mana symbols?
	guild_mana := { styling.use_guild_mana_symbols }
	
	# Is the card a promo card?
	is_promo := { styling.promo }
	is_unsorted := {styling.remove_from_autocount}
	ancestral_mana := { contains(styling.other_options, match:"ancestral generic")}
	name_tag_for_level := { if input == 2 then "_2" else "" }
	card_shape := { "fuse split" }
	
	bridge_colored := {
		
		# Card 1
		# What type of 'hybrid'?
		land     := chosen(choice:"land", card.card_color)
		multi    := chosen(choice:"multicolor", card.card_color)
		hybrid   := chosen(choice:"hybrid", card.card_color)
		artifact := chosen(choice:"artifact", card.card_color)
		if land and colored_lands then template := land_template # use land template instead?
		
		# The selected colors
		colors := sort_text( order: "(wubrg)"
						   , (if chosen(choice:"white", card.card_color) then "w")
						   + (if chosen(choice:"blue", card.card_color)  then "u")
						   + (if chosen(choice:"black", card.card_color) then "b")
						   + (if chosen(choice:"red", card.card_color)   then "r")
						   + (if chosen(choice:"green", card.card_color) then "g"))
		
		
		if multi and (hybrid or colors == "") then (
			colors := colors + "m"
			multi := false
		)
		if artifact and (hybrid or colors == "") then (
			colors := colors + "a"
			artifact := false
		)
		if chosen(choice:"reversed") then colors := reverse(colors)
		color_count := number_of_items(in: colors)
		if colors == "" then color1 := "c"
		
		if color_count > 0 then color1 := colors[color_count - 1]
		image1 := mask_bridge(color: color1)
		
		# Card 2
		# What type of 'hybrid'?
		land     := chosen(choice:"land", card.card_color_2)
		multi    := chosen(choice:"multicolor", card.card_color_2)
		hybrid   := chosen(choice:"hybrid", card.card_color_2)
		artifact := chosen(choice:"artifact", card.card_color_2)
		if land and colored_lands then template := land_template # use land template instead?
		
		# The selected colors
		colors := sort_text( order: "(wubrg)"
						   , (if chosen(choice:"white", card.card_color_2) then "w")
						   + (if chosen(choice:"blue", card.card_color_2)  then "u")
						   + (if chosen(choice:"black", card.card_color_2) then "b")
						   + (if chosen(choice:"red", card.card_color_2)   then "r")
						   + (if chosen(choice:"green", card.card_color_2) then "g"))
		
		
		if multi and (hybrid or colors == "") then (
			colors := colors + "m"
			multi := false
		)
		if artifact and (hybrid or colors == "") then (
			colors := colors + "a"
			artifact := false
		)
		if chosen(choice:"reversed") then colors := reverse(colors)
		color_count := number_of_items(in: colors)
		if colors == "" then color2 := "c"
		
		if color_count > 0 then (
			if chosen(choice:"vertical", card.card_color_2) then
				color2 := colors[color_count - 1]
			else 
				color2 := colors[0]
		)
		image2 := mask_bridge(color: color2)
		
		linear_blend(x1:0, y1:0, x2:1, y2:0)
	}

	mask_bridge := {
		base := "bridge/" + color + "bridge.png"
		
		if land then
			"bridge/clbridge.png"
		else if multi then 
			masked_blend(
				mask:  "bridge/bridgemask.png",
				dark:  "bridge/mbridge.png",
				light: base,
			)
		else if artifact and color_count > 1 and mask_hybrid_with_land() then 
			masked_blend(
				mask:  "bridge/bridgemask.png",
				dark:  "bridge/clbridge.png",
				light: base
			)
		else if artifact then 
			base
		else if color_count > 1 and mask_hybrid_with_land() then
			masked_blend(
				mask:  "bridge/bridgemask.png",
				dark:  "bridge/clbridge.png",
				light: base,
			)
		else base
	}
	
	beyond_background := { color_background(type:"beyond", base_hybrid:card_hybrid, folder:template_prefix.beyond) }
	fuse_left_background := { color_background(type:"fuse_left", base_hybrid:card_hybrid, folder:"fuse_left/", blend_type:"fuse") }
	fuse_right_background := { color_background(type:"fuse_right", base_hybrid:card_hybrid, folder:"fuse_right/", blend_type:"fuse") }
	room_cover := { color_background(type:"cover", base_hybrid:card_hybrid, folder:"rooms/")}
	blend_room_cover := {
		land		:= chosen(card.card_color, choice:"land")
		multi		:= chosen(card.card_color, choice:"multicolor")
		hybrid		:= chosen(card.card_color, choice:"hybrid")
		artifact	:= chosen(card.card_color, choice:"artifact")
		land2		:= chosen(card.card_color_2, choice:"land")
		multi2		:= chosen(card.card_color_2, choice:"multicolor")
		hybrid2		:= chosen(card.card_color_2, choice:"hybrid")
		artifact2	:= chosen(card.card_color_2, choice:"artifact")
		
		colors := sort_text( order: if card_is_wedge(card.card_color) then "(wbgur)" else "(wubrg)"
						, (if chosen(card.card_color, choice:"white"	)	then "w")
						+ (if chosen(card.card_color, choice:"blue"	)	then "u")
						+ (if chosen(card.card_color, choice:"black"	)	then "b")
						+ (if chosen(card.card_color, choice:"red"	)	then "r")
						+ (if chosen(card.card_color, choice:"green"	)	then "g"))
		colors2 := sort_text( order: if card_is_wedge(card.card_color_2) then "(wbgur)" else "(wubrg)"
						, (if chosen(card.card_color_2, choice:"white"	)	then "w")
						+ (if chosen(card.card_color_2, choice:"blue"	)	then "u")
						+ (if chosen(card.card_color_2, choice:"black"	)	then "b")
						+ (if chosen(card.card_color_2, choice:"red"	)	then "r")
						+ (if chosen(card.card_color_2, choice:"green"	)	then "g"))
						
		if colors == "" and multi then (
			colors := "m"
			multi := false
		)
		if colors == "" and artifact then (
			colors := "a"
			artifact := false
		)
		if colors == "" then colors := "c"
		if chosen(card.card_color, choice:"reversed") then colors := reverse(colors)
		color_count := number_of_items(in: colors)
		shape :=	if		chosen(card.card_color, choice:"horizontal"	)	then	"horizontal"
					else if	chosen(card.card_color, choice:"vertical"	)	then	"vertical"
					else if	chosen(card.card_color, choice:"overlay"	)	then	"overlay"
					else															"radial"
		if colors2 == "" and multi2 then (
			colors2 := "m"
			multi2 := false
		)
		if colors2 == "" and artifact2 then (
			colors2 := "a"
			artifact2 := false
		)
		if colors2 == "" then colors2 := "c"
		if chosen(card.card_color_2, choice:"reversed") then colors2 := reverse(colors)
		color_count2 := number_of_items(in: colors2)
		shape2 :=	if		chosen(card.card_color_2, choice:"horizontal")	then	"horizontal"
					else if	chosen(card.card_color_2, choice:"vertical"	 )	then	"vertical"
					else if	chosen(card.card_color_2, choice:"overlay"	 )	then	"overlay"
					else															"radial"
		
		img1 := if color_count == 1 then "rooms/" + colors.0 + "cover.png"
				else if color_count > 2 then "rooms/mcover.png"
				else if shape == "vertical" then
					linear_blend(
						image1:"rooms/" + colors.0 + "cover.png",
						image2:"rooms/" + colors.1 + "cover.png",
						x1: 0, x2: 0, y1:0, y2:0.5
					)
				else if shape == "overlay" then
					combine_blend(
						image1:"rooms/" + colors.0 + "cover.png",
						image2:"rooms/" + colors.1 + "cover.png",
						combine: "symmetric overlay"
					)
				else linear_blend(
					image1:"rooms/" + colors.0 + "cover.png",
					image2:"rooms/" + colors.1 + "cover.png",
					x1: 0.256, x2: 0.325, y1:0, y2:0
				)
		img2 := if color_count2 == 1 then "rooms/" + colors2.0 + "cover.png"
				else if color_count2 > 2 then "rooms/mcover.png"
				else if shape2 == "vertical" then
					linear_blend(
						image1:"rooms/" + colors2.0 + "cover.png",
						image2:"rooms/" + colors2.1 + "cover.png",
						x1: 0, x2: 0, y1:0, y2:0.5
					)
				else if shape2 == "overlay" then
					combine_blend(
						image1:"rooms/" + colors2.0 + "cover.png",
						image2:"rooms/" + colors2.1 + "cover.png",
						combine: "symmetric overlay"
					)
				else linear_blend(
					image1:"rooms/" + colors2.0 + "cover.png",
					image2:"rooms/" + colors2.1 + "cover.png",
					x1: 0.671, x2: 0.744, y1:0, y2:0
				)
		masked_blend(
			dark: img1,
			light: img2,
			mask: "rooms/blend_mask.png"
		)
	}


	swap_fonts_name_default := [
		name: 		{"Beleren Bold"},
		size: 		{15},
		color: 		{"black"},
		italic:		{""},
		vertical:	{0}
	]
	swap_fonts_type_default := [
		name: 		{"Beleren Bold"},
		size: 		{10},
		color: 		{ if is_room() then "white" else "black"},
		italic:		{""},
		vertical:	{0}
	]
	swap_fonts_body_default := [
		name: 		{"MPlantin"},
		size: 		{ left_font_size() },
		color: 		{ "black"},
		italic:		{"MPlantin-Italic"},
		vertical:	{0}
	]
	swap_fonts_body2_default := [
		name: 		{"MPlantin"},
		size: 		{ right_font_size() },
		color: 		{ "black"},
		italic:		{"MPlantin-Italic"},
		vertical:	{0}
	]
	swap_fonts_body3_default := [
		name: 		{"MPlantin"},
		size: 		{ 12 },
		color: 		{ if is_room() then "white" else "black"},
		italic:		{"MPlantin-Italic"},
		vertical:	{0}
	]

	border_mask_script := {
		if is_room()
			then "border_mask_room.png"
		else if uses_fuse_arrows()
			then "border_mask_fuse.png"
		else if is_fuse()
			then "border_mask_fusebar.png"
		else "border_mask.png"
	}
	
	is_room := {
		chosen(styling.frames, choice:"room") or lang_setting("is_room")(card.sub_type)
	}
	is_fuse := { card.rule_text_3 != "" and not is_room() }
	is_arrows := { chosen(styling.frames, choice:"arrows") }
	is_beyond := { chosen(styling.frames, choice:"universes beyond") or auto_beyond() }
	left_nyx := {
		chosen(styling.frames, choice:"nyx") or auto_nyx(card.super_type)
	}
	right_nyx := {
		chosen(styling.frames, choice:"nyx") or (if is_room() then auto_nyx(card.super_type) else auto_nyx(card.super_type_2))
	}
	auto_beyond := {
		chosen(styling.auto_frames, choice:"universes beyond") and (card.card_stamp == "universes beyond" or card.card_stamp == "flatstamped universes beyond")
	}
	auto_nyx := { 
		is_ench := lang_setting("is_enchantment")(input)
		if not is_ench
			then false ## not an enchantment
		else if not set.auto_nyx
			then false ## set auto disabled
		else if not chosen(styling.auto_frames, choice:"nyx")
			then false ## style auto disabled
		else true      ## auto nyx
	}
	uses_fuse_arrows := { (is_fuse() and styling.use_fuse_arrows) or is_arrows() }

	watermark_include := "/magic-modules.mse-include/watermarks"

	left_font_size := {to_number(pull_comma_array(styling.font_size_cap, end:false, cell:0, default:13))}
	right_font_size := {to_number(pull_comma_array(styling.font_size_cap, end:false, cell:1, default:left_font_size()))}
	card_stamp_offset_left_1 := {-5}
	
	faces_coordinates := {
		[
			[
				left: 0,
				top: 0,
				width: 523,
				height: 375
			],
			[
				left: 0,
				top: 0,
				width: 523,
				height: 375
			]
		]
	}
	harder_script := []
############################################################## Set info fields
set info style:
	symbol:
		variation:
			name: invertedcommon
			border radius: 0.10
			fill type: solid
			fill color:   rgb(255,255,255)
			border color: rgb(0,0,0)
############################################################## Extra style options
styling field:
	type: multiple choice
	name: frames
	choice: arrows
	choice: room
	choice: nyx
	choice: universes beyond
styling field:
	type: multiple choice
	name: auto frames
	choice: nyx
	choice: universes beyond
	initial: nyx, universes beyond
styling field:
	type: choice
	name: room images
	choice: one image
	choice: two images
	choice: three images
styling field:
	type: boolean
	name: use fuse arrows
	description: disable this to only use the extra fuse textbox and not fuse arrows
styling field:
	type: text
	name: font size cap
	description: Maximum font size for both textboxes, or "X,Y" to set individual caps
styling field:
	type: multiple choice
	name: other options
	choice: ancestral generic mana
	choice: prerelease stamp
	choice: two illustrators
	initial: two illustrators
styling field:
	type: text
	name: popout image style
	description: The styling instructions for the popout image field, formatted as "left,top,width,height,". The text MUST end with a comma.
styling field:
	type: boolean
	name: remove from autocount
	description: Removes the automatic card number for specific cards, to allow for overcounted cards like in Planeswalker Decks.
	initial: no
include file: /magic-modules.mse-include/rarities/styling_fields
styling field:
	type: boolean
	name: grey hybrid name
	description: Use a grey background for the name and type line on hybrid cards. This is done on real cards.
styling field:
	type: boolean
	name: colored multicolor land name
	description: Use a colored background for the name and type on multicolor land cards with a basic land type. This is done on real cards.
styling field:
	type: boolean
	name: use guild mana symbols
	description: Use the Ravnica guild symbols instead of the official half/half circles for hybrid mana.
	initial: no
styling field:
	type: choice
	name: tap symbol
	description: What tap and untap symbols should be used on cards?
	initial: modern
	choice: modern
	choice: old
	choice: diagonal T
styling field:
	type: package choice
	name: text box mana symbols
	match: magic-mana-*.mse-symbol-font
	initial: magic-mana-small.mse-symbol-font
styling field:
	type: choice
	name: center text 1
	description: When to center text on the first card (short text only means only on one-line cards with no flavor text)
	choice: always
	choice: short text only
	choice: never
	initial: never
styling field:
	type: choice
	name: center text 2
	description: When to center text on the second card (short text only means only on one-line cards with no flavor text)
	choice: always
	choice: short text only
	choice: never
	initial: never
styling field:
	type: boolean
	name: promo
	description: Is this card a promo card, with the "P" rarity?
	initial: no
styling field:
	type: boolean
	name: inverted common symbol
	description: Should the common rarity symbol be inverted, like in Coldsnap?
	initial: no
styling field:
	type: package choice
	name: overlay
	description: Should there be an overlay applied, such as foil?
	match: magic-overlay-*.mse-include
	required: false
styling field:
	type: choice
	name: room cover
	script: card.card_color
	editable: false
	save value: false
styling field:
	type: choice
	name: room cover 2
	script: card.card_color
	editable: false
	save value: false
styling style:
	frames:
		render style: checklist
		direction: vertical
	auto frames:
		render style: checklist
		direction: vertical
	use guild mana symbols:
		choice images:
			yes: /magic-mana-small.mse-symbol-font/mana_guild_rg.png
			no:  /magic-mana-small.mse-symbol-font/mana_rg.png
	tap symbol:
		render style: both
		choice images:
			modern:     /magic-mana-large.mse-symbol-font/mana_t.png
			old:        /magic-mana-large.mse-symbol-font/mana_t_old.png
			diagonal T: /magic-mana-large.mse-symbol-font/mana_t_older.png
	center text 1:
		render style: both
		choice images:
			always:          /magic.mse-game/icons/center-all-text.png
			short text only: /magic.mse-game/icons/center-short-text.png
			never:           /magic.mse-game/icons/center-no-text.png
	center text 2:
		render style: both
		choice images:
			always:          /magic.mse-game/icons/center-all-text.png
			short text only: /magic.mse-game/icons/center-short-text.png
			never:           /magic.mse-game/icons/center-no-text.png
	inverted common symbol:
		choice images:
			no:  { symbol_variation(symbol: set.symbol, variation: "common") }
			yes: { symbol_variation(symbol: set.symbol, variation: "invertedcommon") }
	other options:
		render style: checklist
		direction: vertical
############################################################## Card fields
include file: /magic-modules.mse-include/corners/card_fields
include file: /magic-modules.mse-include/information/card_fields
include file: /magic-modules.mse-include/stamps/card_fields
include file: /magic-modules.mse-include/separators/card_fields_dfc
card style:
	############################# Background stuff
	border color:
		left: 0
		top : 0
		width:	523
		height:	375
		z index: 500
		mask: { if is_room() then "border_mask_room.png" else "border_mask.png" }
	card color:
		left:	31
		top:	14
		width:	241
		height:	345
		z index: 100
		render style: image
		popup style: in place
		image: { module_card() }
	card color 2:
		left:	272
		top:	14
		width:	241
		height:	345
		z index: 100
		render style: image
		popup style: in place
		image: { module_card() }
	############################# Name line
	name:
		left: { if card.card_symbol=="none" then 48 else 63 }
		top: { 27 + name_font_vertical() }
		right:  { 242 - card_style.casting_cost.content_width }
		height: 20
		alignment: bottom shrink-overflow
		padding bottom: 0
		z index: 900
		font:
			name: { name_font() }
			italic name: { name_font_italic() }
			size: { name_font_size() }
			color: { name_font_color() }
	name 2:
		left: { if card.card_symbol_2=="none" then 289 else 304 }
		top: { 27 + name_font_vertical() }
		right:  { 495 - card_style.casting_cost_2.content_width }
		height: 20
		alignment: bottom shrink-overflow
		padding bottom: 0
		z index: 900
		font:
			name: { name_font() }
			italic name: { name_font_italic() }
			size: { name_font_size() }
			color: { name_font_color() }
	casting cost:
		right: 256
		top: 28
		width: { max(24, card_style.casting_cost.content_width) + 3 }
		height: 18
		alignment: middle right
		font:
			name: MPlantin
			size: 18
		symbol font:
			name: magic-mana-large
			size: 18
			alignment: middle right
		always symbol: true
		z index: 920
		padding top: 0
	casting cost 2:
		right: 498
		top: 28
		width: { max(24, card_style.casting_cost_2.content_width) + 3 }
		height: 18
		alignment: middle right
		font:
			name: MPlantin
			size: 18
		symbol font:
			name: magic-mana-large
			size: 15
			alignment: middle right
		always symbol: true
		z index: 920
		padding top: 0
	card symbol:
		left: 42
		top: {if card.card_symbol == "none" then 0 else 26}
		height: 19
		width: 21
		z index: 830
		render style: image
		include file:		/magic.mse-game/card-symbols/menu_choice_images
		image:				{ card_symbol_image(face: 1) }
	card symbol 2:
		left: 283
		top: {if card.card_symbol_2 == "none" then 0 else 26}
		height: 19
		width: 21
		z index: 830
		render style: image
		include file:		/magic.mse-game/card-symbols/menu_choice_images
		image:				{ card_symbol_image(face: 2) }
	############################# Image
	image:
		left: { if is_room() then 41 else 45 }
		top: 53
		width: { if not is_room() then 211 else if styling.room_images == "one image" then 461 else 240 }
		height:	{ if is_room() then 209 else 154 }
		z index: 400
		default: {default_image(card.card_color)}
		mask: { if not is_room() then "" else if styling.room_images == "one image" then "rooms/image_mask.png" else "rooms/image_mask_left.png" }
	image 2:
		left: { if not is_room() then 286 else 262 }
		top: 53
		width: { if not is_room() then 211 else if styling.room_images == "one image" then 0 else 240 }
		height:	{ if is_room() then 209 else 154 }
		z index: 400
		default: {default_image(card.card_color_2)}
		mask: { if is_room() then "rooms/image_mask_right.png" else ""}
	mainframe image:
		left: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).0 else "0"}
		top: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).1 else "0"}
		width: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).2 else "0"}
		height: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).3 else "0"}
		z index: 1010
	mainframe image 2:
		left: 245
		top: 53
		width: { if is_room() and styling.room_images == "three images" then 50 else 0 }
		height: 209
		z index: 410
		mask: rooms/image_mask_middle.png
	############################# Card type
	indicator:
		left: 44
		top: 214.5
		width: 12
		height: 12
		z index: 740
		render style: image
		visible: { has_identity() }
		image: { module_identity() }
	indicator 2:
		left: 282
		top: 214.5
		width: 12
		height: 12
		z index: 740
		render style: image
		visible: { not is_room() and has_identity_2() }
		image: { module_identity() }
	type:
		left: { if has_identity() then "60" else "47" }
		top: { 211 + type_font_vertical() }
		width: { if is_room() then (if has_identity() then 424 else 437) else (if has_identity() then "204" else "217") - max(16,card_style.rarity.content_width) }
		height: 15
		alignment: top shrink-overflow
		z index: 900
		padding top: 0
		font:
			name: { type_font() }
			italic name: { type_font_italic() }
			size: { type_font_size() }
			color: { type_font_color() }
			separator color: red
	type 2:
		left: { if has_identity_2() then "301" else "288" }
		top: { 211 + type_font_vertical() }
		width: { if is_room() then 0 else (if has_identity_2() then "204" else "217") - max(16,card_style.rarity.content_width) }
		height: 15
		alignment: top shrink-overflow
		z index: 900
		padding top: 0
		font:
			name: { type_font() }
			italic name: { type_font_italic() }
			size: { type_font_size() }
			color: { type_font_color() }
			separator color: red
	rarity:
		right: { if is_room() then 500 else 259 }
		top: 212
		width: 31
		height: 14
		z index: 950
		render style: image
		alignment: middle right
		include file: /magic-modules.mse-include/rarities/choice_images
	rarity 2:
		right: 500
		top: 212
		width: { if is_room() then 0 else 31 }
		height: 14
		z index: 950
		render style: image
		alignment: middle right
		include file: /magic-modules.mse-include/rarities/choice_images
	############################# Text box
	text:
		left: 45
		top: { body_font_vertical() + if is_room() then 266 else 234 }
		width: 211
		height: { if is_room() then 90 else if is_fuse() then 100 else 120 }
		font:
			name: { body_font() }
			italic name: { body_font_italic() }
			size: { body_font_size() }
			scale down to: 6
			color: { body_font_color() }
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { body_font_size() }
		alignment:
			script:
				if (styling.center_text_1 == "short text only" and
				   not contains(match:"\n", card.rule_text) and
				   card.flavor_text == "<i-flavor></i-flavor>" and
				   card_style.text.content_lines <= 2) or
				   styling.center_text_1 == "always"
				then "middle center"
				else "middle left"
		z index: 900
		padding left:   6
		padding right:  4
		line height hard: 1.2
		line height line: 1.5
		line height soft: 0.9
		line height hard max: 1.3
		line height line max: 1.6
	text 2:
		left: 286
		top: { body2_font_vertical() + if is_room() then 266 else 234 }
		width: 211
		height: { if is_room() then 90 else if is_fuse() then 100 else 120 }
		font:
			name: { body2_font() }
			italic name: { body2_font_italic() }
			size: { body2_font_size() }
			scale down to: 6
			color: { body2_font_color() }
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { body2_font_size() }
		alignment:
			script:
				if (styling.center_text_2 == "short text only" and
				   not contains(match:"\n", card.rule_text_2) and
				   card.flavor_text_2 == "<i-flavor></i-flavor>" and
				   card_style.text_2.content_lines <= 2) or
				   styling.center_text_2 == "always"
				then "middle center"
				else "middle left"
		z index: 900
		padding left:   6
		padding right:  4
		line height hard: 1.2
		line height line: 1.5
		line height soft: 0.9
		line height hard max: 1.3
		line height line max: 1.6
	rule text 3:
		left: { if is_room() then 50 else 40 }
		top : { body3_font_vertical() + if is_room() then 233 else 338 }
		width: { if is_room() then 444 else 464 }
		height: { if is_room() then 28 else 19 }
		font:
			name: { body3_font() }
			italic name: { body3_font_italic() }
			size: { body3_font_size() }
			scale down to: 6
			color: { body3_font_color() }
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { body3_font_size() }
		alignment: "middle center"
		z index: 900
		padding left:   2
		padding right:  2
		line height hard: 1.2
		line height line: 1.5
		line height soft: 0.9
	watermark:
		left: 40
		top: { if is_fuse() then 235 else 238}
		width: 222
		height: { if is_fuse() then 85 else 103 }
		z index: 720
		render style: image
		popup style: in place
		alignment: middle center
		include file:	/magic.mse-game/watermarks/menu_choice_images
		image:			{ watermark_image_1() }
	watermark 2:
		left: 274
		top: { if is_fuse() then 235 else 238}
		width: 232
		height: { if is_fuse() then 85 else 103 }
		z index: 720
		render style: image
		popup style: in place
		alignment: middle center
		include file:	/magic.mse-game/watermarks/menu_choice_images
		image:			{ watermark_image_2() }
############################################################## Extra card fields
extra card field:
	type: choice
	name: pt box
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: pt box 2
	script: card.card_color_2
	editable: false
	save value: false
extra card field:
	type: choice
	name: fuse_bridge
	script: "true"
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: foil layer
	choice: foil
	save value: false
	editable: false
extra card field:
	type: choice
	name: fusebox 1
	script: card.card_color
	choice: fusebox
	editable: false
	save value: false
extra card field:
	type: choice
	name: fusebox 2
	script: card.card_color_2
	choice: fusebox
	editable: false
	save value: false
extra card field:
	type: text
	name: auto copyright
	script: set.copyright
	save value: false
	editable: false
	show statistics: false
extra card field:
	type: text
	name: promo label
	save value: true
	description: The golden promo label.
extra card field:
	type: text
	name: promo label 2
	save value: true
	description: The second golden promo label.
extra card field:
	type: choice
	name: stamp backing
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: room cover
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: room cover 2
	choice: bar
	editable: false
	save value: false
extra card field:
	type: choice
	name: nyx overlay
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: nyx overlay 2
	script: card.card_color_2
	editable: false
	save value: false
extra card field:
	type: choice
	name: beyond overlay
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: beyond overlay 2
	script: card.card_color_2
	editable: false
	save value: false
	
extra card style:
	fuse_bridge:
		left: 265
		top : 335
		width: 13
		height: 24
		z index: 610
		render style: image
		image: { bridge_colored() }
		visible: { is_fuse() }
	fusebox 1:
		left:	31
		top:	14
		width:	241
		height:	345
		z index: 600
		render style: image
		image: { fuse_left_background() }
		mask: { if is_arrows() then "arrow_mask.png" else if uses_fuse_arrows() then "" else "bar_mask.png" }
		visible: { is_fuse() or is_arrows() }
	fusebox 2:
		left:	272
		top:	14
		width:	241
		height:	345
		z index: 600
		render style: image
		image: { fuse_right_background() }
		mask: { if is_arrows() then "arrow_mask.png" else if uses_fuse_arrows() then "" else "bar_mask.png" }
		visible: { is_fuse() or is_arrows() }
	promo label:
		left: 25
		top: 190
		width: {if contains(styling.other_options, match:"prerelease stamp") then 214 else 0}
		height: 20
		alignment: middle right
		z index: 1030
		font:
			name: ModMatrix
			size: 12
			color: rgb(223,169,41)
	promo label 2:
		left: 278
		top: 190
		width: {if contains(styling.other_options, match:"prerelease stamp") then 214 else 0}
		height: 20
		alignment: middle right
		z index: 1030
		font:
			name: ModMatrix
			size: 12
			color: rgb(223,169,41)
	stamp backing:
		left: 45
		top: 165
		width: 46
		height: 26
		z index: 850
		angle: -90
		visible: { card.card_stamp != "none" }
		render style: image
		image: { recolor_image("/magic-modules.mse-include/stamps/backs/" + (if stamp_shape(field:1) == "triangle" then "triangle_stamp" else "stamp") + "_color.png", color: card.border_color) }
	room cover:
		left: 0
		top: 0
		width: 523
		height: 375
		z index: 810
		render style: image
		visible: { is_room() }
		image: { if card.card_color == card.card_color_2 then room_cover() else blend_room_cover() }
	room cover 2:
		left: 0
		top: 0
		width: 523
		height: 375
		z index: 810
		render style: image
		visible: { is_room() }
		image: rooms/roombar.png
	nyx overlay:
		left:	31
		top:	14
		width:	241
		height:	345
		z index: 330
		render style: image
		popup style: in place
		image: { module_nyx() }
		mask: trim_mask.png
		visible: { left_nyx() }
	nyx overlay 2:
		left:	272
		top:	14
		width:	241
		height:	345
		z index: 330
		render style: image
		popup style: in place
		image: { module_nyx() }
		mask: trim_mask.png
		visible: { right_nyx() }
	beyond overlay:
		left:	31
		top:	14
		width:	241
		height:	345
		z index: 330
		render style: image
		popup style: in place
		image: { beyond_background() }
		mask: trim_mask.png
		visible: { is_beyond() }
	beyond overlay 2:
		left:	272
		top:	14
		width:	241
		height:	345
		z index: 330
		render style: image
		popup style: in place
		image: { beyond_background() }
		mask: trim_mask.png
		visible: { is_beyond() }
